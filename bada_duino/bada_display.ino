// colorwheel_progmem demo for Adafruit RGBmatrixPanel library.
// Renders a nice circle of hues on our 32x32 RGB LED matrix:
// http://www.adafruit.com/products/607

// This version uses precomputed image data stored in PROGMEM
// rather than calculating each pixel.  Nearly instantaneous!  Woo!

// Written by Limor Fried/Ladyada & Phil Burgess/PaintYourDragon
// for Adafruit Industries.
// BSD license, all text above must be included in any redistribution.

#include <RGBmatrixPanel.h>

//#define CLK A4 // USE THIS ON METRO M4 (not M0)
#define CLK 11 // USE THIS ON ARDUINO MEGA
#define OE   9
#define LAT 10
#define A   A0
#define B   A1
#define C   A2
#define D   A3

RGBmatrixPanel matrix(A, B, C, D, CLK, LAT, OE, false);

const unsigned char PROGMEM bitmap[] =
{0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 
0x0e, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x7c, 0x00, 0x0b, 0x01, 0xbc, 0x00, 0x0f, 0x30, 0x38, 0x00, 
0x06, 0x00, 0x70, 0x40, 0x04, 0x19, 0x80, 0x80, 0x0e, 0x1d, 0x00, 0x10, 0x0c, 0x9d, 0x00, 0x10, 
0x0c, 0x83, 0x80, 0x00, 0x09, 0xe7, 0x90, 0x08, 0x0f, 0xff, 0x90, 0x08, 0x0f, 0xff, 0xbc, 0x30, 
0x07, 0xff, 0xbf, 0xc0, 0x05, 0xfe, 0x5f, 0x00, 0x04, 0x7c, 0x4c, 0x00, 0x05, 0x00, 0x4e, 0x00, 
0x09, 0x10, 0x7b, 0x00, 0x0d, 0x90, 0x6c, 0x00, 0x0c, 0xa2, 0x78, 0x00, 0x0d, 0xb4, 0xfc, 0x00, 
0x03, 0x08, 0xfc, 0x00, 0x10, 0x00, 0xf8, 0x00, 0x1e, 0x0c, 0xe0, 0x00, 0x0f, 0xfb, 0xe0, 0x00, 
0x0f, 0xff, 0xc0, 0x00, 0x1f, 0x03, 0xc0, 0x00, 0x0c, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00
};


void setup() {
  int     i, len;
  uint8_t *ptr = matrix.backBuffer(); // Get address of matrix data

  // Copy image from PROGMEM to matrix buffer:
//  memcpy_P(ptr, img, sizeof(img));
  matrix.drawBitmap(0, 0,  bitmap, 32, 32, matrix.Color333(7,3,1));

  // Start up matrix AFTER data is copied.  The RGBmatrixPanel
  // interrupt code ties up about 40% of the CPU time, so starting
  // it now allows the prior drawing code to run even faster!
  matrix.begin();
}

void loop() {
  // Do nothing -- image doesn't change
}
